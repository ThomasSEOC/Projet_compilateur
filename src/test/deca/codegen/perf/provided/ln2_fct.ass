; Main program
; ###############################################################
; VTABLE INIT
; init vtable for default object
	LOAD #null, R0
	STORE R0, 1(GB)
	LOAD code.Object.equals, R0
	STORE R0, 2(GB)
; init vtable for Polyexp
	LEA 1(GB), R0
	STORE R0, 3(GB)
	LOAD Code.Polyexp.pexp, R0
	STORE R0, 5(GB)
	LOAD code.Object.equals, R0
	STORE R0, 4(GB)
; ###############################################################
; ###############################################################
; start main program
	TSTO #13
	BOV stack_overflow_error
	ADDSP #13
; create instance of class Polyexp
	NEW #1, R0
	BOV heap_overflow_error
	PUSH R0
	BSR Code.Polyexp.Init
	POP R2
	STORE R2, 6(GB)
	LOAD #0x0.0p0, R2
	STORE R2, 7(GB)
	LOAD #0x1.0p0, R2
	STORE R2, 8(GB)
	LOAD #0x1.0p0, R2
	OPP R2, R2
	STORE R2, 9(GB)
	LOAD #0x1.6fc2ecp-1, R2
	STORE R2, 10(GB)
; Beginning of main instructions:
while_1_start:
	LOAD 8(GB), R2
	LOAD 7(GB), R3
	ADD #0x1.0p-23, R3	; Plus
	CMP R3, R2
	BLT while_1_end
while_1_body:
; call method pexp
	ADDSP #2
	LOAD 6(GB), R0
	CMP #null, R0
	BEQ dereferencement_null_error
	STORE R0, 0(SP)
	LOAD 7(GB), R2
	LOAD 8(GB), R3
	ADD R3, R2	; Plus
	DIV #0x1.0p1, R2	; float divide
	BOV division_by_zero_error
	STORE R2, 11(GB)
	STORE R2, -1(SP)
	LOAD 6(GB), R0
	LOAD 0(R0), R0
	BSR 2(R0)
	SUBSP #2
	LOAD R0, R3
	STORE R3, 12(GB)
	CMP #0x0.0p0, R3
	BLE if_1_else
if_1_then:
	LOAD 11(GB), R3
	STORE R3, 8(GB)
	LOAD 12(GB), R3
	STORE R3, 10(GB)
	BRA if_1_end	; jump to end of if statement
if_1_else:
	LOAD 11(GB), R3
	STORE R3, 7(GB)
	LOAD 12(GB), R3
	STORE R3, 9(GB)
if_1_end:
	BRA while_1_start
while_1_end:
	LOAD 7(GB), R1
	WFLOAT
	WSTR " = "
	LOAD 7(GB), R1
	WFLOATX
	WNL
	HALT
; ###############################################################
; METHODS
; Code for methods of Object :
; structure init
Code.Object.Init:
	LOAD -2(LB), R1
	LEA 1(GB), R0
	STORE R0, 0(R1)
	RTS
; equals method
code.Object.equals:
	LOAD -2(LB), R0
	CMP -3(LB), R0
	SEQ R0
	RTS
; Code for methods of Polyexp
; Code for init of Polyexp
Code.Polyexp.Init:
	TSTO #14
	BOV stack_overflow_error
	ADDSP #13
; context save
	PUSH R2	; save R2
; store VTable pointer
	LOAD -2(LB), R2
	LEA 3(GB), R0
	STORE R0, 0(R2)
; context restore
	POP R2	; restore R2
	RTS
Code.Polyexp.pexp:
; pexp
	TSTO #27
	BOV stack_overflow_error
	ADDSP #13
; context save
	PUSH R2	; save R2
	PUSH R3	; save R3
	LOAD -3(LB), R2
	LOAD -3(LB), R3
	ADDSP #1
	PUSH R3	; no more GP register available
	LOAD -1(SP), R3	; Load virtual register to R3
	LOAD -3(LB), R3
	ADDSP #1
	PUSH R3	; no more GP register available
	LOAD -1(SP), R3	; Load virtual register to R3
	LOAD -3(LB), R3
	ADDSP #1
	PUSH R3	; no more GP register available
	LOAD -1(SP), R3	; Load virtual register to R3
	LOAD -3(LB), R3
	ADDSP #1
	PUSH R3	; no more GP register available
	LOAD -1(SP), R3	; Load virtual register to R3
	LOAD -3(LB), R3
	ADDSP #1
	PUSH R3	; no more GP register available
	LOAD -1(SP), R3	; Load virtual register to R3
	LOAD -3(LB), R3
	PUSH R3	; no more GP register available
	LOAD #0x1.0p0, R3	; Load virtual register to R3
	LOAD #0x1.0p0, R3
	DIV #0x1.3bp12, R3	; float divide
	BOV division_by_zero_error
	PUSH R3	; no more GP register available
	LOAD -1(SP), R3	; Load virtual register to R3
	MUL 0(SP), R3	; Multiply
	SUBSP #2
	PUSH R3	; no more GP register available
	LOAD #0x1.0p0, R3	; Load virtual register to R3
	LOAD #0x1.0p0, R3
	DIV #0x1.68p9, R3	; float divide
	BOV division_by_zero_error
	PUSH R3	; no more GP register available
	LOAD -1(SP), R3	; Load virtual register to R3
	ADD 0(SP), R3	; Plus
	SUBSP #2
	PUSH R3	; no more GP register available
	LOAD -1(SP), R3	; Load virtual register to R3
	MUL 0(SP), R3	; Multiply
	SUBSP #3
	PUSH R3	; no more GP register available
	LOAD #0x1.0p0, R3	; Load virtual register to R3
	LOAD #0x1.0p0, R3
	DIV #0x1.ep6, R3	; float divide
	BOV division_by_zero_error
	PUSH R3	; no more GP register available
	LOAD -1(SP), R3	; Load virtual register to R3
	ADD 0(SP), R3	; Plus
	SUBSP #2
	PUSH R3	; no more GP register available
	LOAD -1(SP), R3	; Load virtual register to R3
	MUL 0(SP), R3	; Multiply
	SUBSP #3
	PUSH R3	; no more GP register available
	LOAD #0x1.0p0, R3	; Load virtual register to R3
	LOAD #0x1.0p0, R3
	DIV #0x1.8p4, R3	; float divide
	BOV division_by_zero_error
	PUSH R3	; no more GP register available
	LOAD -1(SP), R3	; Load virtual register to R3
	ADD 0(SP), R3	; Plus
	SUBSP #2
	PUSH R3	; no more GP register available
	LOAD -1(SP), R3	; Load virtual register to R3
	MUL 0(SP), R3	; Multiply
	SUBSP #3
	PUSH R3	; no more GP register available
	LOAD #0x1.0p0, R3	; Load virtual register to R3
	LOAD #0x1.0p0, R3
	DIV #0x1.8p2, R3	; float divide
	BOV division_by_zero_error
	PUSH R3	; no more GP register available
	LOAD -1(SP), R3	; Load virtual register to R3
	ADD 0(SP), R3	; Plus
	SUBSP #2
	PUSH R3	; no more GP register available
	LOAD -1(SP), R3	; Load virtual register to R3
	MUL 0(SP), R3	; Multiply
	SUBSP #3
	PUSH R3	; no more GP register available
	LOAD #0x1.0p0, R3	; Load virtual register to R3
	LOAD #0x1.0p0, R3
	DIV #0x1.0p1, R3	; float divide
	BOV division_by_zero_error
	PUSH R3	; no more GP register available
	LOAD -1(SP), R3	; Load virtual register to R3
	ADD 0(SP), R3	; Plus
	SUBSP #2
	PUSH R3	; no more GP register available
	LOAD -1(SP), R3	; Load virtual register to R3
	MUL 0(SP), R3	; Multiply
	SUBSP #3
	ADD #0x1.0p0, R3	; Plus
	MUL R3, R2	; Multiply
	LOAD #1, R3
	FLOAT R3, R3
	SUB R3, R2	; Minus
	LOAD R2, R0
	BRA Code.end.Polyexp.pexp
	WSTR "Erreur : sortie de la méthode Polyexp.pexp sans return"
	WNL
	ERROR
Code.end.Polyexp.pexp:
; context restore
	POP R2	; restore R2
	POP R3	; restore R3
	RTS
; ###############################################################
; ERRORS
stack_overflow_error:
	WSTR "Erreur : dépassement de pile"
	WNL
	ERROR
dereferencement_null_error:
	WSTR "Erreur : dereferencement de null"
	WNL
	ERROR
heap_overflow_error:
	WSTR "Erreur : le tas est plein"
	WNL
	ERROR
division_by_zero_error:
	WSTR "Erreur : division par 0"
	WNL
	ERROR
; end main program
